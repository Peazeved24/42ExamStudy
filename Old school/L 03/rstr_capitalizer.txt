Assignment name  : rstr_capitalizer
Expected files   : rstr_capitalizer.c
Allowed functions: write
--------------------------------------------------------------------------------

Write a program that takes one or more strings and, for each argument, puts 
the last character of each word (if it's a letter) in uppercase and the rest
in lowercase, then displays the result followed by a \n.

A word is a section of string delimited by spaces/tabs or the start/end of the
string. If a word has a single letter, it must be capitalized.

If there are no parameters, display \n.

Examples:

$> ./rstr_capitalizer | cat -e
$
$> ./rstr_capitalizer "Premier PETIT TesT" | cat -e
premieR petiT tesT$
$> ./rstr_capitalizer "DeuxiEmE tEST uN PEU moinS  facile" "   attention C'EST pas dur QUAND mEmE" "ALLer UN DeRNier 0123456789pour LA rouTE    E " | cat -e
deuxiemE tesT uN peU moinS  facilE$
   attentioN c'esT paS duR quanD memE$
alleR uN dernieR 0123456789pouR lA routE    E $
$>
--------------------------------------------------------------------------------
#include <stdio.h>
#include <unistd.h>

int ft_il(char c)
{
    return (c >= 'a' && c <= 'z');
}

int ft_iu(char c)
{
    return (c >= 'A' && c <= 'Z');
}


void ft_rcap(char *str)
{
    int i = 0;
    int li = -1;

    while(str[i])
    {
        if(str[i] == ' ' || str[i] == '\t')
        {
            if(li != -1 && ft_il(str[li]))
            {
                str[li] = 'A' +(str[li] - 'a');
            }
            li = -1;
        }
        else
        {
            li = i;
            if(ft_iu(str[i]))
            {
                str[i] = 'a' + (str[i] - 'A');
            }
        }
        i++;
    }

    if(li != -1 && ft_il(str[li])) // importante lembrar !!!
    {
        str[li] = 'A' + (str[li] - 'a');
    }
}


int main(int ac , char **av)
{
    if(ac < 2)
    {
        write(1, "\n", 1);
    }

    int i = 1;

    while(i < ac)
    {
        char *str = av[i];
        ft_rcap(str);
        while(*str)
        {
            write(1, str, 1);
            str++;
        }

        i++;
    }

    write(1, "\n", 1);
    return 0;

}

