Write a function who takes two unsigned int as parameters and returns the
computed LCM of those parameters.

LCM (Lowest Common Multiple) of two non-zero integers is the smallest positive
integer divisible by the both integers. 

A LCM can be calculated in two ways:

- You can calculate every multiples of each integers until you have a common
multiple other than 0

- You can use the HCF (Highest Common Factor) of these two integers and
calculate as follows:

    LCM(x, y) = | x * y | / HCF(x, y)

 | x * y | means "Absolute value of the product of x by y"

If at least one integer is null, LCM is equal to 0.

Your function must be prototyped as follows:

 unsigned int    lcm(unsigned int a, unsigned int b);
------------------------------------------------------------------------

#include <stdio.h>

 unsigned int    lcm(unsigned int a, unsigned int b)
 {
        unsigned int lcm;
      
    
    lcm =(a > b) ? a : b; 

    if(a == 0 || b == 0)
    {
        return 0;
    }
    
    while(1)
    {
        if( lcm % a == 0 && lcm % b == 0)
        {
            return lcm;
           
        }
        lcm++;
    }
    
 }


int main() 
{
 unsigned int a = 40;
 unsigned int b = 19;
 
 printf("%u", lcm(a , b));
 
 
 return 0;

}


------------------------------------------------------------------------

#include <stdio.h>

unsigned int ft_mdc(unsigned int a , unsigned int b)// maximo divisor comum
{
    while(b != 0)
    {
        unsigned int temp = b;
        b = a % b;
        a = temp;
    }

    return a;
}

unsigned int    lcm(unsigned int a, unsigned int b) // minimo multiplo comum.
{
    unsigned int mdc = ft_mdc(a ,b);

    if(a == 0 && b == 0)
    {
        return 0;
    }

    unsigned int result = (a / mdc) * b;

    return result;
}

int main()
 {
     unsigned int a = 48;
     unsigned int b = 18;
     
     printf("%u", lcm(a ,b));
     
     
     return 0;
 }