Assignment name  : pgcd
Expected files   : pgcd.c
Allowed functions: printf, atoi, malloc, free
--------------------------------------------------------------------------------

Write a program that takes two strings representing two strictly positive
integers that fit in an int.

Display their highest common denominator followed by a newline (It's always a
strictly positive integer).

If the number of parameters is not 2, display a newline.

Examples:

$> ./pgcd 42 10 | cat -e
2$
$> ./pgcd 42 12 | cat -e
6$
$> ./pgcd 14 77 | cat -e
7$
$> ./pgcd 17 3 | cat -e 
1$
$> ./pgcd | cat -e
$


--------------------------------------------------------------------------------

Por exemplo, para calcular o MDC de 48 e 18:
48 ÷ 18 = 2 resto 12
18 ÷ 12 = 1 resto 6
12 ÷ 6 = 2 resto 0
O último valor não-zero (6) é o MDC.

--------------------------------------------------------------------------------
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>



unsigned int mdc(unsigned int a, unsigned int b)//O MDC é o maior número inteiro que divide ambos os números sem deixar resto.
 { 
     while(b != 0) //  ate n houver resto.
     {
        unsigned  int temp = b;
         b = a % b;
         a = temp; // Atribui o valor antigo de b (armazenado em temp) para a
     }
     
     return a; // o ultimo valor de b sera o nosso mdc , que esta atribuido a 'a'.
 }


 int main(int ac , char **av)
 {
   if(ac == 3)
   {
        printf("%u", mdc(atoi(av[1]), atoi(av[2])));
   }

    write(1, "\n", 1);

    return 0;
 }