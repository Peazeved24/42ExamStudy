Assignment name  : ft_range
Expected files   : ft_range.c
Allowed functions: malloc
--------------------------------------------------------------------------------

Write the following function:

int     *ft_range(int start, int end);

It must allocate (with malloc()) an array of integers, fill it with consecutive
values that begin at start and end at end (Including start and end !), then
return a pointer to the first value of the array.

Examples:

- With (1, 3) you will return an array containing 1, 2 and 3.
- With (-1, 2) you will return an array containing -1, 0, 1 and 2.
- With (0, 0) you will return an array containing 0.
- With (0, -3) you will return an array containing 0, -1, -2 and -3.
---------------------------------------------------------------------------

int ft_dif(int start , int end) // strlen == para int !
{
   return (start - end || end - start);
}


int *ft_range(int start, int end) // funcao pricipal == contem o array!
{
   int i  = 0;
   int range = ft_dif(start , end) + 1;
   int *result = (int*)malloc(range * sizeof(int)); // o meu "array" dinamico!

   if(range == NULL)
   {
        return NULL;
   }

   if(end >= start)
   {
        while(end >= start) // intervalo crescente ! (meu fim e menor do que o comeco )
        {
            result[i++] = start++; // o valor de start vai para i 
        }
        else
        {
            while(end <= start) // intervalo decrescente !
            {
                result[i++] = start--;
            }
        }
   }

   return range
}
//## a ideia esta em entender os intervalos para ent i  se apoderar desse valor!

int main()
{ 
    int  i = 0;
    int start = -1; // valor hipotetico  (inicial)
    int  end = 9; // "" "" (final)
    int dif = ft_dif(start , end) + 1; // dif == len (limitador) == para o meu i poder chegar ate ao ponto final!
    int *result = ft_range(start , end); // funcao com o meu intervalos
 
    if(result == NULL) //  caso der erro !
    { 
        return 1;
    }

    while(i < dif) // enquanto o meu i n chegar ao meu limite (dif == len). incrementa
    {
        printf("%d, ", result[i++]); // e devolve a contagem !
    }

    free(result); // liberta a memoria !( memoria dinamica (comecar com um valor x e acabar == vazia!))


    return 0;
} 