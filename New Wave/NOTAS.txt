NOTAS:

str_cspn - calcular o comprimento do segmento inicial de s que não contém nenhum dos caracteres em reject.

str_pbrk  - Procura na string s1 a primeira ocorrência de qualquer caractere presente na string s2. e retorna um ponteiro para a posicao prentendida!

str_spn -  "retorna , em int , o numero total dos primeiros caracteres encontrados na str"

-------------------------------------------------------------------------

MAX(ARRAY DE INT) = lembrar da condicao!(vazio ou sem tamanho ou inferior a 0)
      comecar a contagem a partir a ultima posicao o array!
      condicao de contagem e de comparacao!
      retorne max	

-------------------------------------------------------------------------
 BITS:

swap = trocar (esq == dir || dir == esq)

printf =  operadores ternarios!

reverse ==  malandragem.

-------------------------------------------------------------------------

INTER(ASCII) :

-criar um array de 256 com o valor 0;

- usar marcadores (0, 1, 2) para mapear os caracteres !!
 
- associar os digitos dentro dessa posicao do array usando um type cast(int)

-------------------------------------------------------------------------
WDMATCH (match de i com len == write)

## numero de caracteres tem de ser igual ao i (n.c encontrados)!

- calcular o comprimento da s1!

- comparer i e len enquando s2 n chega ao fim!

- se os caracteres (i) forem iguais a len == copia
-------------------------------------------------------------------------
Union( S, C, L (0 / 1) )


- FUNCAO AUCILIAR !!( mapear os caracteres)(s, c, l)== len e usado como limitador

-loop entre as duas string!
 -condicao - caso ft_auxiliar == 0 -- escreva

loop na segunda str 
 condicao - caso ft_auxiliar == 0 -- escreva (s2, s2[j], j && s1, s2[j], i)
  - escrever entao a ultima str(s2).!
-------------------------------------------------------------------------
STRREEV(in place)

-mesma logica reversao so que i < l
 -mesma logica do swap (temp = i \ i = b =\ b = temp)

	return str;

-------------------------------------------------------------------------

Last_ word (NA MAIN)

- 1 funcao auxiliar que de flag a espacos;

- na main
	- 4 loops:
		-  pegar a len da minha STR! para comecar do fim
		-  remover espacos do fim
		-  remover espacos antes da ultima palavra; -- comecar do 		   inicio da ultima palavra;
		-  loop que imprime desse novo comeco ate ao fim!



-------------------------------------------------------------------------
FT_PRIME_SUME:

uso de 4 funcoes auxiliaries:
	- ft_atoi
	- put_nbr(ft_putchar ou n);
	- ft_isprime (flag de numero primos)== 0 se n for p , 1 se for p!


#ft_isprime:

	- i = 2 // 2 e o menor primo 
	- Números menores ou iguais a 1 não são primos, então retorna 0 (falso)
	-verificar a divisibilidade do numero!
		-while(i * i <=num) && if(num % i == 0).

#main

- nbr == atoi;
- sum == result // sum armazena o ultimo primo encontrado

-loop decrementando o nbr; (numero primo ate chegar a 0)

- caso o meu nbr == 1 (ft_isprime)
 	- e sum = soma do sum + nbr; // digito norte + todos os ultimos digitos primos!
	- nbr--; ( ate chegar ao 0 == fim)
	- ft_putnbr printa a #sum!!

#mini atoi == o meu r = ao meu valor atual * 10 - a dif do meu c.a com 48.


-------------------------------------------------------------------------

EPURSTR( espace remover)

3 funcoes :
	- 2 auxiliaries (ft_isblank + ft_strlen);
	- 1 funcao void que usa uma *str;

ft_strlen
	- responsavel por "medir a string" == ter o numero de c totais 

ft_isblank 
	- responsavel por encontrar uma variedade de espacos;


ft_epurstr:
	
	- criar uma var q armazena o meu len inicial
	
	- remover espacos extremos :
			- verificar o ultimo digito / primero digito se e um espaco
	
 	- remover espacos dentro da str

	- lopp (len--)
		- condicao dupla
			- encontrar n espacos (para imprimir) OU (*(s + 1)) && !ft_isblak((*(s + 1)));

 ## (*(s + 1))  == proximo digito(espacos incluidos) .. e isto ( (*(s + 1))  + !ft_isblank((*(s + 1)))garante que haja espacos mas sem extras!.

 ## trim == loops que removem espacos das extremidades :


	- while(len && ft_isblanck(s[len - 1]) == len--;
		- remove espacos do fim.

	- while(len && ft_isblank(&s)
		- remove espacos DO INICIO (*s) == s++; len--;

-------------------------------------------------------------------------
FT_EXPANDSTR(word = 1/0?)

mesma coisa que o epurstr!

-- 2 funcoes auxiliaries : == ( FAZER TRIM)
	- encontrar espacos
	- pegar o len total do meu av[1];


na funcao principal:
	- uma var da len;
	- uma var que sera usada para dar flag a caracteres ( word);


	- fazer trim!!
	- loop principal:
		-decrementoo da len
		- condicao :
			- que verifique se o meu caracter atual e um nao espaco
					- se sim , write(1,s,1) / word = 1;
			- que verifique caso word == 0; // else if
					- se sim, write(1, "   ", 3). / word = 0;

-------------------------------------------------------------------------

FT_ATOIBASE (HEXA/dec/bin == DEC)

ft_atoibase:

- pegar uma base == 16 -- e uma base mais abrangente! 01234567879abcedf;
					         
		- 2 - binaria = 0 / 1;
		- 8 - octonogal = 0 - 8;
		- 10 - decimal = 0 - 9;
		- 16 - hexadecimal = 09/AF;

==  vai entregar um valor em qualquer umas das bases ==  temos de converter la em decimal!


	3 funcoes auxiliaries :

	- responsavel por encontrar espacos

	- converter maisuculas em minusculas
	

	- um funcao que referencia um valor a uma base!

		- 1 array de char com a base 16 + um ptr que aponta para o primeiro digito.

		- loop:
		- enquanto o meu ptr n chegar ao fim + a dif n for superior a base dada
			- e caso:
				-ft que converte mais - min estive dentro do range do ptr

		- entao = colocar numero ( ptr(ponteiro) - digits(array de char com a b16)



	3 funcoes auxiliares :

    1 = espacos
    2 = mai - min
    3 = associa os digitos a uma base


    funcao princial (const char *str , int base)
        -3 var = r = 0 , s =1 , d;

        - 2 if / 2 loops

            1 if - condicoes n desejadas 
                    - se a str for nula , se a base for menor do que 2 ou maior do que 16;

            1 while - para espacos
                        - caso a minha str for uma espaco --- ignore

            2 if = simbolos == + ou - :
                    e se for - == s = (*str == '-') ? -1 : 1;

            2 while = funcao principal!! (*str)
                        - d = ft_getdigits(*str , base);
                            - caso a ft retorne erro(-1) === break;

                        - r = r * base + digits; str++;

        a funcao acaba com o multiplicao entre 2 valores === r * s;
      

-------------------------------------------------------------------------

ft_list_size:

	1- strut - noma da strut (typedef struc (nome))

		= a minha var de dados(*data)  == armazena inf. desejada.
								
						- ponteiro generic que 					armazena qualquer tipo de dados.


		= um pont == aponta para a proxima inf (*next)
			-- perminte a ligacao entre estruturas o msm 								tipo.



-------------------------------------------------------------------------
FT_RANGE:

(array com comeco e fim == sequencia de numeros)

1 funcao auxiliar:
	- dif = retorna me a dif == len ! (tamanho para int = dif / '' '' *str == len);


1 fucao principal :

	- range (dif) de start - end + 1 (1 - garantir que os valores sejam adicionados);

	- malloc - (range)

	- index;


	condicao:

		-condicao crecente !
			-  neste caso i apodera se de start e  start ++ 

		- condicao decrescente 

			-- mesma coisa so que start--;

		return range;


	na main :

		index , start - end , dif (+ 1) , *result;

		loop onde o meu i chega ate ao limite (dif)
			- printa o meu result (array) com o i incrementado!

-----------------------------------------------------------------------------
hidenp ( s1 != s2)

 	- 2 index para ambas as stings;


	- loop antres as duas string -- ver se n sao == 
		- write(1, "0", 1) caso a s2[j] chegar ao fim antes da s1[i]
-----------------------------------------------------------------------------
LCM:

unsigned int ft_mdc(unsigned int a , unsigned int b)// maximo divisor comum
{
   while(b) // enquanto b n for 0
   {
        unsigned int temp = b; // temp = ultimo valor de b
        b = a % b; // b = resto da div entre a e b;
        a = temp; // a = temp;
   }

   return a;
}

unsigned int    lcm(unsigned int a, unsigned int b) // minumo multiplo comum
{
    unsigned int mdc = ft_mdc(a, b); // maximo divisor comum;

    if(a == 0 || b == 0)
    {
        return 0;
    }

    unsigned int result = (a / mdc) * b;


    return result;
}


int main()
 {
    unsigned int a = 48;
    unsigned int b = 18;
     
    printf("%u", lcm(a ,b));
     
     
    return 0;
 }

MDC == #####Inicialmente: a = 48, b = 18
Primeira iteração:
temp = 18
b = 48 % 18 = 12
a = 18
Segunda iteração:
temp = 12
b = 18 % 12 = 6
a = 12
Terceira iteração:
temp = 6
b = 12 % 6 = 0
a = 6
O loop termina porque b = 0
A função retorna a, que é 6
Portanto, o MDC de 48 e 18 é 6.
Este algoritmo é eficiente e funciona com base no princípio de que o MDC de dois números também é o MDC do menor número e do resto da divisão do maior pelo menor.########
--------------------------------------------------------------------------------------------------------------

FloodFill:

- entender colunas(y) e linhas(x)  e matriz(tab)(STRUCT).


- dentro da "main ft" inicializar o nosso target == e a posicao inicial da minha coluna / linha que sera mudado.( para depois mandar
  para a ft_auxilar)

dentro da ft_auxilar:

	-  current == a minha posicao atual !!!! (current.x / current.y)
	- target == e a minha posicao desejada / celula a ser mudada!!!
	- size == o tamanho total da minha linha(x) ou coluna(y)

- uma condicao que negue casos n permitidos!

	(current.x < 0 .. current.x >= size.x)

- uma condicao que ignore celulas n target
	(!= target)

- associar a minha nova celula a minha posicao atual (que contem a celula que devera ser mudada).

	- tab[current.x][current.y] = 'F'.

- 	fazer a recursividade!!!!

	1 forma *chamar a ft*(tab, current.x + 1, current.y)
		- fazer isso 3x - x = + 1 / - 1 ... y = + 1/ - 1.

- 2 forma (forma op af boy!)

	- 	*(alias)var  [4] = {{0, -01}, {1, 0}, {0, 1}, }
		- For loop = for(int i  = 0; i < 4 ; i++)
				{
				  *(alias)var = {current.x + *(alias)var[i].x, current.y + *(alias)var[i].y);
				    (recursividade) # ff(tab, size, *(alias)var, target);
				}

##
Cima: {0, 1} 
Direita: {1, 0} 
Baixo: {0, -1} 
Esquerda: {-1, 0} 
##

------------------------------------------------------------------------------------------------------------------------

ft_slit(str to word)


3 ft_aux :

1 ft_blank == v;
 

2 ft_wc :
	- ft que conta o nr de palavras dentro de uma frase;
				- uso de 2 var (wc = 0 / flag= 0)
	- enquanto a *str n chega o fim 
		- e caso ft blank for true == flag = 0;
			-else if(flag == 0)
				- wc (numero de palavras incrementa)(e para ao encontrar espacos)
					- flag = 1;
					

3 - char* ft_getWord:
	-ft que retorna um *ptr para cada palavra dentro e uma str;

		- uma var = len;

			- loop que pegue a minha primeira palavra;
				- while(str[len] && !ft_blank(*str)) - str++ / len++;

		- o meu ptr que contera a minha palavra 
			malloc usando o meu len + 1;

		for loop que ira passer os caracteres da minha str == word 
							word[i] = str[i] / i++;

		- garantir que o meu word chegue ao fim ... return word;



4 -ft principal 

	3 var :
		1 - numero de palavras da str ;
		2 - array de ptr que armazena as palavras obtidas por getW.
		3 - index.


	loop que verifique a minha *str ate ao fim:

		- passer os meus ptr obtidos por getW ao array de ptr
			- word[i] = ft_getW(str);
	
		- codincao de seguranca:
			
			- loop que elimina os caractees do ## final ao inicio
				free(word[--i]);
			- fora do loop 
					- free(word) // remove o array
					- return NULL;

		- passa para a proxima posicao do array == i++
			
		-passa para o proximo n espaco

		caso for 

			else
			{
				str++;s
			}
		

		free(word) // remove o array

		return words; // retorna me o array.
-------------------------------------------------------------------------------------

 rostring (first words to last word)


	1 ft auxiliar que verifica espacos 
		ft_blank

		
	na main

	
	- 1 ptr para o av[1]
	- 1 int para a len


1 verificar espacos 
	- pula se encontrar;

pegar a ref do inicio da minha str = *ptr = str;

	

2 loop para pegar o comprimento dessa primeira word (trim)

	while(*str && !ft_blank(*str)
		len++;
		str++;

3 criar um ptr para malloc 
	
	char *fw = (char)malloc((len + 1) * sizeof(char));

	if(fw == NULL)
	{
		return 1;
	}

4 = passer os caracter de ws para fw



### parte da escrita da str

	- cortar espacos que estariam entre a primeira e a segunda word

	while(ft_blank(*str)
		str++;

-----------------------------------------------------------------------------------
 str_capitalizer (isU/isL)

- ft auxilar que retorna true caso for Maius/ minus.

 - ft principal
	- receber uma str e mudar todas as primeiras palavras para Maius.

 - 2 var:
	- 1 index (i)
	- flag  = 1;

- 1 loop (str[i])
	1 condicao que verifique que o meu i e um espaco 
		- flag = 1;
	else 
		- caso flag for n 1(n espaco):

			- condicao  ft_il(str[i])
				- str[i] = 'A' + (str[i] - 'a')
					- flag = 0;
			- fazer o msm usando else para maius.


######## este codigo pede iagezimos vetor ( x numero de vetoress e n um especifico)

inicializar o i na minha primeira posicao dos vetores = 1

while(i < ac) // aqui esta o truque

	-char *str = av[i] //iagezimo vetor.

	- associar a minha str a ft.

	- while(str)
		- escreve a str;

lembrando que precisa de espaco entre strs!! 

	- write(1, " " , 1)

e no fim por uma '\n';


#### CASO FOR AO CONTRARIO ! ( REVERSE )


ambas as ft auxiliaries sao a msm  + a main;


 ## diferencas = na flag passa a ser LI(last index) = -1 ( ultimo valor da str)

	- condicao de espacos(9 13 32)

		- li = -1;

		MAS caso li != -1 && ft_iL(str[li)
		{
		 vamos comecar a usar li no lugar de i pois estamos  a mecher no 		ultimo digito

		if(li != -1 && ft_iL(str[li])
		{
	          str[li] = 'A' + (str[li] - 'a');	 
		}

		}
 -else
	- o meu li pegas os ulitmos valores de i
		li = i;
		e  convertemos os digitos n ultimos em min (ft_up)


	### IMPORTANTE####
		NO FIM lembrar que temos de convertar o ultimo digito da ultima palavra

-----------------------------------------------------------------------------------

ft_Split (words ptrs)

- 3 ft auxiliaries :

	- ft_blanks = v;


	- uma ft que conta palavras:

		-inicializo uma flag e uma var wc;(word count)
		- o truque esta na flag que aponta para espacos 
					- caso for == flag 0;

					- if(flag == 0)
					- flag torna se 1 e wc incrementa
					- return wc;

	- uma ft que retorna um ptr de uma palavra.
		-  fazer uma str len dentro da ft so que de words!!!

			- while(str[len] && !ft_blank(str[len])
				len++
		- inicializar o meu malloc (*word) + (o tamano do len de uma word + 1) 
		- para dps passarmos os caracteres da str para a word (usand ot loop e len como limitador)

		
		- return word;


### ft principal 

	- uma var com a contagem de palavras;
	- uma array de ptr  usando malloc;
		(mesma coisa que um ptr so que (char**) / sizeof(char*)
	- um index

	
	nesta parte dar valor ao array de ptr (words) pois  quem vai gerar
	as palavras e a ft que retorna ptr !
	

	- loop que verifica a minha str:
		- e caso for um c n espaco!
			- words[i] = ft_getW(str)
				- passer os ptr para o array!!!!;

		##condicao de seguranca###
			- remover caractrer por caracter usando loop
		
			e remover os ptr do array 
			- return NULL;

	- passer para a minha proxima posicao do array; (i++)


-----------------------------------------------------------------------------------

Rostring(fw[i = wf[i])
	- 1words e passa la para o fim da str sem mudar o resto!!!


1 ft auxiliar :
	- ft_is blank = v;

dentro da main(int ac , char **av)

	- 2 var:
		- um str com o meu vetor
		- uma len -  para medir o tamanho da primeira palavra

	- fazer um trim no inicio da minha str;

	- apos eliminar espacos do inicio temos de pegar a ref. do inicio:
		char *ws = str;

	=== pegar o tamanho da minha 1st word ! (str[len]);
		- while(str[len] && !ft_blank(*str)
			-len++ / str++;

	- apos termos o tamanho da minha 1word = malloc
		
		char *fw = (char*) malloc((len + 1) * sizeof(char);

			- condicao de seguranca;

	apos isso e so passer os caracteres da minha ref.(ws) para o meu ptr com malloc;

		-for(int i = 0; i < len; i++)
			- fw[i] = ws[i]

	
#### apos isso e so  escrever a minha str !!!!

	- eliminar espacos do novo incio

	- copier o resto  da minha str;

	- write(1, " ", 1) --novo espaco entre o fim e a minha primeira palavra;
	- write(1 , fw, len) - escreve a minha primeira palavra;


-----------------------------------------------------------------------------------

rev_wst(words[i][j])

 - reverter uma str usando malloc e write!
	- n havera espacos nem no inicio nem doubles(entes palavrs)

3 ft - auxiliaries:

	- blank = espacos;
	- wc = contagem de palavras;
	- strlen( retorna me o tamanho da str -- usar para write*)

#################

ft principal :
	- um index; 
	- da contagem de palavras da minha str;
	- um array de ptr com malloc;
	- e uma ref ao inicio da minha str;


	1 ponto e passer a minha str para o meu array

		loop da str

			- condicao = caso for espaco || caso o meu proximo c for nullo

				- len = str - start + !ft_blank(*str)
				
				malloc para words[i] usando len de casa palavra;
			

			for loop para passear os caracteres:
		
				- for(int j = 0 ; j < len ; j++)
					- word[i][j] = start[j]
			- apos o for loop garatir que:
					- words[j] chegue ao fim!
					- incremento do i para pasar para a proxima palavra:
					- start = str + 1;



	2 ponto e rev da str:

		for loop:
			onde j sera o meu wc- 1 , j >= 0 - j--;
			
		escrever a minha words[j] como o tamanho da words[j] (strlen);
		
	1 condicao q adiciona espacos para cada WORD processada  == add espacos;

		- free words[j]

	- no fim free(words)
-----------------------------------------------------------------------------------





			






















